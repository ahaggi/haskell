Recursive data structures

    As we've seen, a constructor in an algebraic data type can have several (or none at all) fields and each field must be of some concrete type. 
    With that in mind, we can make types whose constructors have fields that are of the same type! Using that, we can create recursive data types, 
    where one value of some type contains values of that type, which in turn contain more values of the same type and so on.

    Think about this list: [5]. That's just syntactic sugar for 5:[]. elm on the left side of the :, and on the right side, there's a list.
    Now how about the list [4,5]? Well, that desugars to 4:(5:[]). 
            Looking at the first : , we see that it also has an element on its left side and a list (5:[]) on its right side. 
    Same goes for a list like 3:(4:(5:6:[])), which could be written either like that or like 3:4:5:6:[] (because : is right-associative) or [3,4,5,6].



    Implementing our own List type 

    We could say that a list can be an empty list or it can be an element joined together with a : with another list (that can be either the empty list or not).

        data List a = Empty | Cons { listHead :: a, listTail :: List a} deriving (Show, Read, Eq, Ord)  
        
        Cons is another word for :
        Empty is like [] 
        and 
        4 `Cons` (5 `Cons` Empty) is like 4:(5:[]).

        infixr 5 :-:  
        data List a = Empty | a :-: (List a) deriving (Show, Read, Eq, Ord)  

        A fixity states how tightly the operator's precedence and whether it's left-associative or right-associative. 
        For instance, *'s fixity is infixl 7 * and +'s fixity is infixl 6. That means that they're both left-associative (4 * 3 * 2 is (4 * 3) * 2) 
        But * binds tighter than +, because it has a (greater fixity / higher precedence), so 2+3*4 is 2+(3*4).


        Let's make a function that adds two of our lists together.

            infixr 5  .++  
            (.++) :: List a -> List a -> List a   
            Empty .++ ys = ys  
            (x :-: xs) .++ ys = x :-: (xs .++ ys)  

        Notice how we pattern matched on (x :-: xs). That works because pattern matching is actually about matching constructors.

    Implementing our own "binary search tree" type

        data Tree a = EmptyTree | Node a (Tree a) (Tree a) deriving (Show, Read, Eq)  
    
    First off, if the element we're inserting is equal to the root element, just return a tree that's the same. If it's smaller, return a tree that has the same root value, 
    the same right sub-tree but instead of its left sub-tree, put a tree that has our value inserted into it. Same (but the other way around) goes if our value is bigger 
    than the root element.



    data Chunk c =  EmptyChunk | Chunk c  (Chunk c ) deriving (Show, Read, Eq)

    ghci>   (Chunk "123" ( Chunk"456" EmptyChunk))
    Chunk "123" (Chunk "456" EmptyChunk)



    algebraic data structures are a really cool and powerful concept in Haskell. We can use them to make anything from boolean values and weekday enumerations 
    to binary search trees and more!



