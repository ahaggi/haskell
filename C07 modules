Modules
  A Haskell module is a collection of related functions, types and typeclasses. A Haskell program is a collection of modules
  where the main module loads up the other modules and then uses the functions defined in them to do something. 

  The Haskell standard library is split into modules, each of them contains functions and types that are somehow related and 
  serve some common purpose. There's a module for manipulating lists, a module for concurrent programming, a module for 
  dealing with complex numbers, etc. 

  The syntax for importing modules in a Haskell script is import <module name>. This must be done before defining any 
  functions, so imports are usually done at the top of the file. One script can, of course, import several modules.

    import Data.List  



  You can also put the functions of modules into the global namespace when using GHCI.
    ghci> :m + Data.List  


  However, if you've loaded a script that already imports a module, you don't need to use :m + to get access to that module.
    someFile.hs 
        import Data.List
        someFn = ...
    anotherFile.hs 
        import someFile ,,, We get access to Data.List 's functions also


  If you just need a couple of functions from a module, you can selectively import just those functions. 
  If we wanted to import only the nub and sort functions from Data.List, we'd do this:
    import Data.List (nub, sort)  


  You can also choose to import all of the functions of a module except a few select ones. 
  Say we already have our own function that's called nub and we want to import all the functions from Data.List except 
  the nub function:
    import Data.List hiding (nub)
  

  Another way of dealing with name clashes is to do qualified imports. The Data.Map module, exports a bunch of functions
  with the same name as Prelude functions, like filter or null. Haskell won't know which function to use. Here's how we solve this:
    import qualified Data.Map  

  This makes it so that if we want to reference Data.Map's filter function, we have to do Data.Map.filter, whereas just filter still refers to prelude filter. 
  We can rename the qualified import to something shorter
    import qualified Data.Map as M  
    Now, to reference Data.Map's filter function, we just use M.filter.


  https://downloads.haskell.org/~ghc/latest/docs/html/libraries/
  to see which modules are in the standard library. A great way to pick up new Haskell knowledge is to just click through the standard 
  library reference and explore the modules and their functions.




Data.List
  
  intersperse: takes an element and a list and then puts that element in between each pair of elements in the list. 
  intersperse 0 [1,2,3,4,5,6]

  ..

  "transpose" transposes a list of lists. If you look at a list of lists as a 2D matrix, the columns become the rows and vice versa.
  
    Say we have the polynomials 3x2 + 5x + 9, 10x3 + 9 and 8x3 + 5x2 + x - 1 and we want to add them together. 
    We can use the lists [0,3,5,9], [10,0,0,9] and [8,5,1,-1] 

    ghci> map sum $ transpose [[0,3,5,9],[10,0,0,9],[8,5,1,-1]]  
    [18,8,6,17]  
  
  "concat" flattens a list of lists into just a list of elements. 
    ghci> concat [ [1,1,1,1] , [2,2,2,2] , [3,3,3,3] ]  ==> [1,1,1,1,2,2,2,2,3,3,3,3]  

  "concatMap" is the same as first mapping a function to a list and then concatenating the list with concat.
    ghci> concatMap (replicate 4) [1..3]                  ==> [1,1,1,1,2,2,2,2,3,3,3,3]
    ghci> concat $ map (replicate 4) [1..3]               ==> [1,1,1,1,2,2,2,2,3,3,3,3]
    ghci> concat $ map (\x -> [ x | y <- [1..4] ]) [1..3] ==> [1,1,1,1,2,2,2,2,3,3,3,3]

  "and" takes a list of boolean values and returns True only if all the values in the list are True
    ghci> and $ map (>4) [5,6,7,8]   
    True  

    The same as
    foldLeft' (\acc x -> if x > 4 then True else acc) False [5,6,7,8]

  "or" is like and, only it returns True if any of the boolean values in a list is True.

  "any" and "all" take a predicate and then check if any or all the elements in a list satisfy the predicate, respectively. 
  Usually we use these two functions instead of mapping over a list and then doing and or or.

  "iterate" takes a function and a starting value. It applies the function to the starting value, then it applies that function
  to the result, then it applies the function to that result again, etc. It returns all the results in the form of an infinite list.
    ghci> take 10 $ iterate (*2) 1  
    [1,2,4,8,16,32,64,128,256,512]  
  
  "splitAt" takes a number and a list. It then splits the list at that many elements, returning the resulting two lists in a tuple.
    ghci> splitAt 3 "heyman"  
    ("hey","man")  
    ghci> splitAt 100 "heyman"  
    ("heyman","")  
    ghci> splitAt (-3) "heyman"  
    ("","heyman")  

  "takeWhile" 
  
  "dropWhile" is similar, only it drops all the elements while the predicate is true. Once predicate equates to False, it returns the rest of the list. 
    ghci> dropWhile (<3) [1,2,2,2,3,4,5,4,3,2,1]  
    [3,4,5,4,3,2,1]  

  "span" is kind of like takeWhile, only it returns a pair of lists. The first list contains everything the resulting list from takeWhile would contain if 
  it were called with the same predicate and the same list. 
  
  "partition" takes a list and a predicate and returns a pair of lists. The first list in the result contains all the elements that satisfy the predicate, 
  the second contains all the ones that don't.
    ghci> partition (`elem` ['A'..'Z']) "BOBsidneyMORGANeddy"  
    ("BOBMORGAN","sidneyeddy")  

    ghci> span (`elem` ['A'..'Z']) "BOBsidneyMORGANeddy"  
    ("BOB","sidneyMORGANeddy")  

  "find" takes a list and a predicate and returns the first element that satisfies the predicate. But it returns that element wrapped in a Maybe value

  "elemIndices" is like elemIndex, only it returns a list of indices, in case the element we're looking for crops up in our list several times. 
  
  "lines" is a useful function when dealing with files or input from somewhere. It takes a string and returns every line of that string in a separate list.
  
  "words" and "unwords" are for splitting a line of text into words or joining a list of words into a text. 
  
  "nub" takes a list and weeds out duplicate elements. 
  
  "\\" is the list difference function. 
    ghci> [1..10] \\ [2,5,9]  
    [1,3,4,6,7,8,10]  

  "union" It returns the union of two lists. it isn't like concat. 
    ghci> [1..7] `union` [5..10]
    [1,2,3,4,5,6,7,8,9,10]
  


  What length, take, drop, splitAt, !! and replicate have in common is that they take an Int as one of their parameters (or return an Int)
  Data.List has their more generic equivalents, named genericLength, genericTake, genericDrop, genericSplitAt, genericIndex and genericReplicate.

  If we try todo:
    10 / length [1,2] ,, we get a type error, because you can't use / with an Int
    10 / genericLength [1,2] ,, works out just fine.
  
  By functions 
    The nub, delete, union, intersect and group functions all have their more general counterparts called nubBy, deleteBy, unionBy, intersectBy and groupBy. 
    Read more abt "group", before reading the next section
        ghci> let values = [-4.3, -2.4, -1.2, 0.4, 2.3, 5.9, 10.5, 29.1, 5.3, -2.4, -14.5, 2.9, 2.3]  
        ghci> groupBy (\x y -> (x > 0) == (y > 0)) values  
        [[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]

    "on" function from Data.Function. on is defined like this
     on f g = \x y -> f (g x) (g y)  

    So doing (==) `on` (> 0) returns an equality function that looks like \x y -> (x > 0) == (y > 0). 

  Similarly, the sort, insert, maximum and minimum also have their more general equivalents. Functions like groupBy take a function that determines when two elements
  are equal. sortBy, insertBy, maximumBy and minimumBy take a function that determine if one element is greater, smaller or equal to the other.

    sortBy take a function which return "Ordering" (LT, EQ or GT), and a list

    ghci> let xs = [[5,4,5,4,4],[1,2,3],[3,5,4,3],[],[2],[2,2]]  

    ghci> sortBy (compare `on` length) xs           -- compare `on` length is the equivalent of \x y -> length x `compare` length y
    [[],[2],[2,2],[1,2,3],[3,5,4,3],[5,4,5,4,4]]  

Data.Char
    isSpace 
    isLower 
    isAlpha
    ...

  ghci> groupBy ((==) `on` isSpace) "hey guys its me"  
  ["hey"," ","guys"," ","its"," ","me"]  



Data.Map
  Association lists (also called dictionaries) are lists that are used to store key-value pairs (list of pairs) where ordering doesn't matter. 

  Because Data.Map exports functions that clash with the Prelude and Data.List ones, we'll do a qualified import.
 
        import qualified Data.Map as Map  
  

  "fromList" function takes an association list (in the form of a list) and returns a map with the same associations.
   If there are duplicate keys in the original association list, the duplicates are just discarded.    
    ghci> Map.fromList [(1,2),(3,4),(3,2),(5,5)]  
    fromList [(1,2),(3,2),(5,5)]  



  "lookup" get some value by key, the return value can be "Nothing" or "Maybe value" 
    Map.lookup key someMap -> value




  "map" and "filter" work much like their list equivalents.

    ghci> Map.map (*100) $ Map.fromList [(1,1),(2,4),(3,9)]  
    fromList [(1,100),(2,400),(3,900)]  

    ghci> Map.filter isUpper $ Map.fromList [(1,'a'),(2,'A'),(3,'b'),(4,'B')]  
    fromList [(2,'A'),(4,'B')]  
    

    "keys" and "elems" return lists of keys and values respectively. keys is the equivalent of map fst . 
    Map.toList and elems is the equivalent of map snd . Map.toList

    "fromListWith" It acts like fromList, only it doesn't discard duplicate keys but it uses a function supplied to it to decide what to do with them. 


    "insertWith" is to insert what fromListWith is to fromList. It inserts a key-value pair into a map, but if that map already contains the key, 
    it uses the function passed to it to determine what to do.

Data.Set
    The Data. module offers us, well, sets. Like sets from mathematics. All the elements in a set are unique
    Checking for membership, inserting, deleting, etc. is much faster than doing the same thing with lists, Notice that "insert" means "orderedInsert" not append. 

    Because the names in Data.Set clash with a lot of Prelude and Data.List names, we do a qualified import.

        import qualified Data.Set as Set  
    

    import qualified Data.Set as Set  
    ghci> let setNub xs = Set.toList $ Set.fromList xs  
    ghci> setNub "HEY WHATS CRACKALACKIN"  
    " ACEHIKLNRSTWY"    


Making our own modules

  Exporting functions in our module 

    We say that a module exports functions. What that means is that when I import a module, I can use the functions that it exports. 
    It can define functions that its functions call internally, but we can only see and use the ones that it exports.

    At the beginning of a module, we specify the module name. If we have a file called Geometry.hs, then we should name our module Geometry. 
    Then, we specify the functions that it exports and after that, we can start writing the functions. So we'll start with this.

    Note that has to be:
      Module's name has to be the same as the file.
      Module's name must start with a capital letter.
      Module's name does not include non AlphaNumeric chars.
      Each file contains only one module.

        module Geometry ( fn1 , fn2, fn3, fn4) where
        fn1= ... will be exported
        fn3= ... will be exported
        ..
        fn5= ... will NOT be exported , we can used internally 

    When making a module, we usually export only those functions that act as a sort of interface to our module so that the implementation is hidden. 
    If someone is using our Geometry module, they don't have to concern themselves with functions that we don't export. We can decide to change those
    functions completely or delete them in a newer version (we could delete fn5) and no one will mind because we weren't exporting them in the first place.
    

    Hierarchical structures in module

        Geometry.hs has to be in the same folder that the program that's importing it is in, though.

        Modules can also be given a hierarchical structures. Each module can have a number of sub-modules and they can have sub-modules of their own. 
        Let's section these functions off so that Geometry is a module that has three sub-modules, one for each type of object.

        First, we'll make a folder called Geometry. Mind the capital G. In it, we'll place three files: Sphere.hs, Cuboid.hs, and Cube.hs. 
            module Geometry.Sphere ( volume, area) where    -- Any dots '.' in the module name refers to a directory (eqv of package in java).
            volume=...
            area=...

            module Geometry.Cuboid ( volume, area) where
            volume=...
            area=...
            
            module Geometry.Cube ( volume, area) where
            import qualified Geometry.Cuboid as Cuboid  
            volume=...
            area=...

        Alright! So first is Geometry.Sphere. Notice how we placed it in a folder called Geometry and then defined the module name as Geometry.Sphere. 
        We did the same for the cuboid. Also notice how in all three sub-modules, we defined functions with the same names. We can do this because they're separate modules. 
        We want to use functions from Geometry.Cuboid in Geometry.Cube but we can't just straight up do import Geometry.Cuboid because it exports functions with 
        the same names as Geometry.Cube. That's why we do a qualified import and all is well.

        and we can import the modules like
            import qualified Geometry.Sphere as Sphere  
            import qualified Geometry.Cuboid as Cuboid  
            import qualified Geometry.Cube as Cube 

  Exporting "custom data types" in our module
    In the next capital we will define some types, which can be exported as:
          module Shapes   
          ( Point(..)  
          , Shape(..)  -- can be a circle or rectangle
          , surface  
          , nudge  
          , baseCircle  
          , baseRect  
          ) where  

    By doing Shape(..), we exported all the constructors for Shape, so that means that whoever imports our module can make shapes by using the Rectangle and Circle 
    We could also opt not to export any constructors for Shape by just writing Shape in the export statement. That way, someone importing our module could only make shapes by using the auxilliary functions baseCircle and baseRect.
    You can't create a map by doing Data.Map.Map [(1,2),(3,4)] because it doesn't export that value constructor. However, you can make a mapping by using one of the auxilliary functions like Map.fromList. 




